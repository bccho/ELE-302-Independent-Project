{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11360\viewh12760\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Omni-drive\
\
Because the ping-pong ball can land anywhere in space, we needed a robot that could quickly move anywhere in space. Because it is very difficult to do this with conventional steering systems, we decided to use an omni-directional drive (or omni-drive). An omni-drive consists of four wheels mounted at right angles to each other. These wheels have rollers along their circumference, allowing them to be pushed orthogonally to their direction of rotation. The rollers allow the robot to move in any direction, and the fact that the wheels can be independently controlled allows the sum of the forces to point in any direction. Together, this translates to a robot that can drive in any direction.\
\
Motors and Chassis\
\
We used an omni-drive chassis that had already been built last year by Ethan Gordon and Luke Pfleger. The main body is laser cut acrylic, with four 3D printed and acrylic motor mounts along the sides. The motors are 25mm diameter, 20.4:1 geared, high power Pololu Gearmotors, and the wheels are 4\'94 VEX omni-wheels. All four motors are run off a single SI\\\{7.2\}\{\\volt\} NiCd battery. We made no real changes to this chassis, besides redoing some of the wiring and replacing the set screws for the wheels.\
\
Motor Controllers\
\
An omni-drive requires 4 independent controllers capable of driving forwards and backwards and controlling throttle. To do this, we use H-bridges. H-bridges use four transistors to completely select power and ground for each terminal of the motor as shown in Figure [H-bridge dummy]. By turning on different transistors, the H-bridge can direct current through the motor in either direction, and can brake the motor by connecting both terminals to either power or ground. Since the switching is controlled by transistors, they can be given PWM signals, which allows for throttle control.\
\
This basic idea is very simple, but there are many complications in the design of an H-bridge. The first of these arises from our use of PWM signals. A PWM signal has both an \'93on\'94 period and an \'93off\'94 period. During the \'93on\'94 period, one side of the motor must be connected to ground and the other must be connected to power. To make things concrete, let\'92s assume we are driving the motor in a direction such that the left side is connected to ground and the right is connected to power. The question, then, is what to do during the \'93off\'94 period. Since the motor has inductance, it is a bad idea to completely disconnect the motor during the \'93off\'94 period, as this will force the back EMF to drop across the internal diodes of the transistors. Our remaining options then, are to reverse the motor during the \'93off\'94 period, or to brake it. Reversing the motor during the \'93off\'94 period is known as lock anti-phase drive, and braking it is known as phase-magnitude drive.\
\
The second complication with H-bridges is that if two transistors on the same side of the H-bridge are ever turned on at the same time, they create a direct short from power to ground. The H-bridge, then, must be designed in such a way that two same-side transistors cannot be on at the same time.\
\
The chassis we used also had H-bridges that had already been built. The circuit diagram and board image is shown in Figure []. NMOS transistors are used on the ground side, and PMOS transistors are used on the power side. Each gate has an inline \\SI\{1.1\}\{\\kilo\\ohm\} resistor to protect the PSoC from back EMF spikes. The left side gates are wired directly together, as are the right side gates. Given a low signal, then, the PMOS will turn on and the NMOS will turn off, connecting the motor terminal to power. Given a high signal, the PMOS will turn off and the NMOS will turn on, connecting the motor terminal to ground. Since we never want to motor to be floating (as that causes the back EMF to drop across the FET diodes), this arrangement works well.\
\
Since we are operating the motors at \\SI\{7.2\}\{\\volts\}, the PMOS transistors need an input close to that to turn off. The PSoC drives its outputs at \\SI\{3.3\}\{\\volts\} which is not nearly high enough to achieve this. The original design used open drain comparators with a threshold set at \\SI\{1.5\}\{\\volts\} to achieve the higher voltage. The SI\\\{750\}\{\\ohm\} pull-up resistors in the circuit diagram act as the pull-ups for the open-drain outputs. Since the PSoC has its own internally configurable open drain outputs, we simply used those to directly drive the H-bridges, eliminating the original comparators. The pull-up resistors also serve to connect both terminals of the motor to ground in the event of a PSoC failure, creating a safe failure condition.\
\
Gordon et Pfleger used lock anti-phase drive, and this influenced several of their H-bridge design decisions. Since the \'93off\'94 time PWM signal is reverse, the stop condition for the motors is a $50\\%$, duty cycle, such that the motor is connected forwards half the time and backwards the other half of the time. According to their report, the first time they tried this, with a fairly standard \\SI\{100\}\{\\hertz\} PWM, they burned out two motors. To avoid burning out their motors, they had to increase their frequency to about \\SI\{10\}\{\\kilo\\hertz\} This high frequency required making the pull-up resistors very small, to make the time constant of the transistors\'92 gate capacitances low enough to allow them to actually turn on and off with the input signal. We believe that the main cause of their motors burning out was their choice of phase anti-lock drive. The frequency was high enough that the motors did not turn, as intended, but was also low enough that there was enough time for the current to reach full stall current in each direction, thereby burning out the motors.\
\
We chose to use phase-magnitude drive, if only for the simple reason that it is more efficient to brake the motor during the \'93off\'94 time than it is to reverse it. This also came with the benefit that we believe we could have safely run the motors at a much lower PWM frequency, as the stop condition for phase-magnitude drive is simply braking without any PWM signal, so nothing can stall. We only apply a PWN signal when the motor is actually supposed to turn, so any frequency should be safe. If the motor were to actually stall, it is possible that the high frequency would help protect the motor, but otherwise, we believe a lower frequency would have been safe. However, we decided to leave the frequency at \\SI\{10\}\{\\kilo\\hertz\}, since we knew that was absolutely safe. We did occasionally see some problems where the motor would have trouble starting at low speeds (\\textit\{e.g.\}, going from off to a $30\\%$ duty cycle, the motor would occasionally stall briefly and require a push to get going). A lower frequency might have given the motor more sustained current and allowed it to start more reliably at lower speeds.\
\
The specific details of the control signals \\texttt\{C1\} and \\texttt\{C2\} required to drive the H-bridge in sign-magnitude mode will be given when we discuss the hardware programmable hardware required to implement them in section [].\
\
Dead Reckoning\
\
Since the very principle of an omni-drive\'92s motion is dependent on the wheels slipping, we cannot track the wheels\'92 motion to determine the position of our robot. Instead, we use dead reckoning. To implement dead reckoning, we use a 9 DOF combined accelerometer, gyroscope, and magnetometer, the LSM9DS0 chip from ST Microelectronics, mounted on an Adafruit breakout board. This chip communicates with the PSoC through I2C.}